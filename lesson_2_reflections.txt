What happens when you initialize a repository? Why do you need to do it?
git init
git status
You create a git repository which can track versions but no commits are made during initialization. The first commit has to be done with git commit. A system (unvisible) .git file is created.

How is the staging area different from the working directory and the repository? What value do you think it offers?
It's an intermediate place to put files before commiting. It shows what will be in the repository once we commit.

git add (add to the staging area)
git status
git commit -m ""
git diff (shows diff repository:staging area)
git diff --staged (diff staging area:last commit)
git diff commit1 commit 2
git checkout master (when HEAD detached)

How can you use the staging area to make sure you have one commit per logical change?
Add changes one by one to the staging area and commit them separately.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are helpful if we want to create different versions of the app (or different language version)
git branch easy-mode
git checkout easy-mode
git checkout -b easy-mode (=git branch easy-mode + git checkout easy-mode)

How do the diagrams help you visualize the branch structure?
They allow to understand what was commited where and which changes won't be visible in certain commits.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
It merges the changes commited by multiple participants, taking into account what has actually been changed by all of them (if one deletes a line and the other adds something  but doens't delete the line, a result will be both changes implemented - a delete and an add)